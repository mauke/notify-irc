#!perl
use v5.36;
use Carp qw(croak);
use Getopt::Long qw(:config gnu_getopt);
use IO::Socket::IP qw(SOCK_STREAM $CRLF);

use constant {
    RPL_WELCOME           => '001',
    RPL_ENDOFMOTD         => '376',
    ERR_NOSUCHCHANNEL     => '403',
    ERR_TOOMANYCHANNELS   => '405',
    ERR_NOMOTD            => '422',
    ERR_ERRONEOUSNICKNAME => '432',
    ERR_NICKNAMEINUSE     => '433',
    ERR_NEEDMOREPARAMS    => '461',
    ERR_CHANNELISFULL     => '471',
    ERR_INVITEONLYCHAN    => '473',
    ERR_BANNEDFROMCHAN    => '474',
    ERR_BADCHANNELKEY     => '475',
    ERR_BADCHANMASK       => '476',
};

our $VERSION = '0.02';

my $Chatty;

sub parse_irc($line) {
    $line =~ s/$CRLF\z//;
    say STDERR "<<< $line" if $Chatty;
    my ($prefix, $cmd, $middle, $last) = $line =~ m{
        \A
        (?: : ( [^ ]+ ) [ ]+ )?
        ( [^: ] [^ ]* )
        (?: [ ]+ [^: ] [^ ]* )*
        (?: [ ]+ : (.*) | [ ]* )
        \z
    }x or die "Can't parse IRC message: $line";
    +{
        prefix => $prefix,
        cmd    => $cmd,
        args   => [split(/ +/, $middle // ''), $last // ()],
    }
}

sub format_irc($cmd, @args) {
    my $prefix;
    if ($cmd =~ /^:/) {
        $prefix = $cmd;
        $cmd = shift @args;
    }
    defined $cmd
        or croak "Missing command name";
    $cmd = uc $cmd;
    grep /[$CRLF]/, $prefix // (), $cmd, @args
        and croak "IRC messages cannot contain CR/LF";
    my $final = pop @args;
    grep / /, $prefix // (), $cmd, @args
        and croak "IRC commands and non-final arguments cannot contain spaces";
    my $msg =
        (defined $prefix ? $prefix . ' ' : '')
        . $cmd
        . join('', map " $_", @args)
        . (defined $final ? " :$final" : '');
    utf8::downgrade $msg;
    length $msg > 510
        and croak "IRC messages cannot exceed 512 bytes";
    say STDERR ">>> $msg" if $Chatty;
    $msg . $CRLF
}

sub nick_bump($nick) {
    $nick =~ s/_\K(\d+)\z/$1 + 1/ae
        or $nick =~ s/_\z/_0/
        or $nick .= '_';
    $nick
}

my %param;
{
    my @param_spec = qw(
        *channel
        channel_key
        join?
        password
        *message
        *nickname
        notice?
        *port
        *server
        tls?
        verbose?
    );

    my (@getopt_spec, @required);

    for my $param (@param_spec) {
        my $required = $param =~ s/^\*//;
        my $bool = $param =~ s/\?\z//;

        push @getopt_spec, $param . ($bool ? '!' : '=s');

        push @required, $param if $required;

        if (defined(my $val = $ENV{"INPUT_\U$param"})) {
            $val = $val ne '0' && $val ne 'false'
                if $bool;
            $param{$param} = $val;
        }
    }

    GetOptions(\%param, @getopt_spec)
        or exit 1;

    for my $req (@required) {
        defined $param{$req}
            or die "$0: required parameter $req is not set\n";
    }
}

$Chatty = $param{verbose};

my $sock = IO::Socket::IP->new(
    PeerHost    => $param{server},
    PeerService => $param{port},
    Type        => SOCK_STREAM,
) or die "$0: Can't connect to $param{server} on $param{port}: $@\n";

my $nick = $param{nickname};

print $sock format_irc 'PASS', $param{password}
    if defined $param{password};
print $sock format_irc 'NICK', $nick;
print $sock format_irc 'USER', 'notify-irc', '*', '*', "notify-irc/$VERSION";

# here for a good time
$SIG{ALRM} = sub {
    print STDERR "$0: Timed out\n";
    exit 142;
};
alarm 120;

while (my $line = readline $sock) {
    my $msg = parse_irc $line;
    if ($msg->{cmd} eq 'PING') {
        print $sock format_irc 'PONG', $msg->{args}->@*;
    } elsif ($msg->{cmd} eq ERR_NICKNAMEINUSE) {
        $nick = nick_bump $nick;
        print $sock format_irc 'NICK', $nick;
    } elsif ($msg->{cmd} eq ERR_ERRONEOUSNICKNAME) {
        $nick = 'notifybot';
        print $sock format_irc 'NICK', $nick;
    } elsif (
        $msg->{cmd} eq RPL_WELCOME ||
        $msg->{cmd} eq RPL_ENDOFMOTD ||
        $msg->{cmd} eq ERR_NOMOTD
    ) {
        last;
    }
}

if ($param{join}) {
    print $sock format_irc 'JOIN', $param{channel}, $param{channel_key} // ();
    while (my $line = readline $sock) {
        my $msg = parse_irc $line;
        if ($msg->{cmd} eq 'PING') {
            print $sock format_irc 'PONG', $msg->{args}->@*;
        } elsif ($msg->{cmd} eq 'JOIN' && defined $msg->{prefix}) {
            # probably us
            last;
        } elsif (
            $msg->{cmd} eq ERR_NEEDMOREPARAMS ||
            $msg->{cmd} eq ERR_BANNEDFROMCHAN ||
            $msg->{cmd} eq ERR_INVITEONLYCHAN ||
            $msg->{cmd} eq ERR_BADCHANNELKEY ||
            $msg->{cmd} eq ERR_CHANNELISFULL ||
            $msg->{cmd} eq ERR_BADCHANMASK ||
            $msg->{cmd} eq ERR_NOSUCHCHANNEL ||
            $msg->{cmd} eq ERR_TOOMANYCHANNELS
        ) {
            die "Can't join $param{channel}: $msg->{cmd}";
        }
    }
}

print $sock format_irc $param{notice} ? 'NOTICE' : 'PRIVMSG', $param{channel}, $param{message};

if ($param{join}) {
    print $sock format_irc 'PART', $param{channel};
}

print $sock format_irc 'QUIT', 'bye';

while (my $line = readline $sock) {
    my $msg = parse_irc $line;
    if ($msg->{cmd} eq 'PING') {
        print $sock format_irc 'PONG', $msg->{args}->@*;
    }
}

close $sock;
